codegen2

Генерация кода для вещественных выражений.

fld qword ptr [esp]
fld qword ptr [esp+8]
faddp ...
fst 

// можно sse, но надо проверять

Как целое число преобразовать в вещщественное при помощи сопроцессора?
fild
fist
туда сюда

Что умеет сопроцессор, чего не умеет ссе? 1. extended 2. sin, cos, etc

Генерация функций. Пролог, эпилог.

f_f proc near
код
ret
endp

Оптимизации будут оптимизировать код одной процедоры. Никакой межпроцедурной
оптимизации. Следовательно можно предусмотреть, ну или какой-то отдельный индек 
или просто перменную, которая позволяет найти код, относящийся к одной функции.
Ну можно в таблицу символов положить номер первой и последней команды.
Ну или короче чото ещё.

Управляющие операторы. do-while much easy Например
сначала генерируем тело цикла, потом условия их на стек
test
потом jnz на метку, которую поставили где-то там.

1. Внести понятие меток.
2. ...
3. профит

...
циклы просто, иф просто
break, continue, return:
1. стек из циклов
2. return pushes r-value, jumps before stack frame epilog, очистить все текущие
локальные переменные (для брейк континью - тоже)
Короче нам нужен ещё стек для цепочки блоков. Можно попробовать через ссылки на родителей
в символах таблицы символов.

желательные интегральные тестики:
    q-sort
    численное интегрирование
    простая геометрия (чтобы структуры были)
    обратную матрицу