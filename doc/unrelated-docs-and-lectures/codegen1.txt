Генерация кода
Модуль или файл, который для синтаксических узлов содиржит функции
Generate, которые принимают на вход AsmCode, в которую складывает код команд функция.

обращение к массивам и записям
пусть есть a[i+5]
на стэке вычисляется выражение i+5
потом на стэк кладётся a как адрес
потом сложение и разыменовывание

>GetLValue
v_a dd 0
push offset v_a
pop ecx
pop eax
mul eax, size
add eax, ecx
push DWORD PTR [eax] // а что если там не целое число, а структура или флоат?
// а если не целое число, то генерируем заталкивание всего элемента массива
// макс 5 пушей, если больше то кодген цикла

откуда брать size?
>функция для размера типов данных // лучше результат закешировать
>выравнивание стуктур опционально

для a[][][] мы кладём указатель и всё работает

Записи

s.x
то же самое почти, кладём адрес структуры и смещение элементов

// затолкать порядок элементов из символа в таблицу символов (это у меня специфик)

Размер символа можно вычислять при каком-нибудь проходе по таблице символов.
Накапливая размер каждой переменной можно кэшировать смещение.
SymVar->offset байт от начала таблицы символов

Для a.b.x опять есть какая-то разница

Присваивание. Более общий случай.
Т.е. для любых типов. Для си кладём после присваивания херню в стэк.

>После каждого выражения надо очищать стек add esp, размер значения выражения

Функции и процедуры.
Передаём данные через стек.
Для передачи данных создаём структуру stack frame - это просто последовательность данных
в стеке, состоит из следующих частей, в первых аргумент, во-вторых адрес возврата.
В третьих - служебная область, в четвёртых локальные переменные.
И в пятых временные переменные.
Последовательно.
И возвращаемое значение если оно есть. (перед всеми)
Каким образом с ним работать? Допустим мы хотим вызывать процедуру.
Складываем аргументы в стек.
Вызываем тупо call.
после call процедура должна отвести место под локальные переменные. sub esp, size?
потом процедура выполняет работу. А потом add esp, size
А потом ret
После ret нужно выкинуть из стека аргументы - add esp, некий size (из размера таблицы символов)

Обращение к локальным переменным осуществляется через смещение в стеке.
Чтобы временные переменные не засирали стек, мы сохраняем конец куска стека с локальными этими
самыми в EBP. И все смещения вычисляем через EBP

EBP сохраняют в середине стекового фрейма, перед локальными переменными
push EBP
mov EBP, ESP

и перед ret надо восстановить EBP из середины стека для родительской процедуры.
>enter
>leave
спец комманды

Аргументом к команде ret  можно дать количество слов, которые надо выкинуть из стека
Недостаток в том, что аргумент является константой, для ...) в си - не получится.

Как можно реализовать функции с переменным числом аргументов? А вот как.
Вызываемая функция хочет добраться до первого первого аргумента сначала.
Но проблемы возникают, поэтому аргументы складываются в стек в обратном порядке - 
справа налево.

Вызывающий код сначала отводит в стеке место под возвращаемое значение. sub esp, size
А потом действует как обычно.

Указатели на функцию не создают проблем.

