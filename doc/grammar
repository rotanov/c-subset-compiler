Grammar

    Notation

    In the syntax notation used in this clause, syntactic categories (nonterminals)
are indicated by words, separated by `-` symbol, and literal words and character
set members (terminals) by enclosing in grave accent (` рус. — гравис).
    A colon (:) following a nonterminal introduces its definition. Alternative
definitions are listed on separate lines, except when prefaced by
the words ‘‘one of’’. An optional symbol is indicated by enclosing in curly
braces ({}) so that {expression} indicates an optional expression non terminal.
    // at the end of the line denotes beginning of a comment

    Expressions

// 6.5.1.1 Generic selection excluded
primary-expression:
    identifier
    literal
    string-literal
    `(` expression `)`

// 6.5.2.5 Compound literals - excluded
postfix-expression:
    primary-expression
    postfix-expression `[` expression `]`
    postfix-expression `(` {argument-expression-list} `)`
    postfix-expression `.` identifier
    postfix-expression `->` identifier
    postfix-expression `++`
    postfix-expression `--`

unary-expression:
    postfix-expression
    `++` unary-expression
    `--` unary-expression
    unary-operator cast-expression
    sizeof unary-expression
    sizeof `(` type-name `)`

unary-operator: one of
    `&` `*` `+` `-` `~` `!`

cast-expression:
    unary-expression
    `(` type-name `)` cast-expression

multiplicative-expression:
    cast-expression
    multiplicative-expression `*` unary-expression // cast-expression
    multiplicative-expression `/` unary-expression // cast-expression
    multiplicative-expression `%` unary-expression // cast-expression

additive-expression:
    multiplicative-expression
    additive-expression `+` multiplicative-expression
    additive-expression `-` multiplicative-expression

shift-expression:
    additive-expression
    shift-expression `<<` additive-expression
    shift-expression `>>` additive-expression

relational-expression:
    shift-expression
    relational-expression `<` shift-expression
    relational-expression `>` shift-expression
    relational-expression `<=` shift-expression
    relational-expression `>=` shift-expression

equality-expression:
    relational-expression
    equality-expression `==` relational-expression
    equality-expression `!=` relational-expression

AND-expression:
    equality-expression
    AND-expression `&` equality-expression

exclusive-OR-expression:
    AND-expression
    exclusive-OR-expression `^` AND-expression

inclusive-OR-expression:
    exclusive-OR-expression
    inclusive-OR-expression `|` exclusive-OR-expression

logical-AND-expression:
    inclusive-OR-expression
    logical-AND-expression `&&` inclusive-OR-expression

logical-OR-expression:
    logical-AND-expression
    logical-OR-expression `||` logical-AND-expression

// right associative
// PHP HAS LEFT ASSOCIATIVE CONDITIONAL OPERATOR (unable to hold it)
conditional-expression:
    logical-OR-expression
    logical-OR-expression `?` expression `:` conditional-expression

assignment-expression:
    conditional-expression
    unary-expression assignment-operator assignment-expression

assignment-operator: one of
    `=` `*=` `/=` `%=` `+=` `-=` `<<=` `>>=` `&=` `^=` `|=`

expression:
    assignment-expression
    expression `,` assignment-expression

argument-expression-list:
    assignment-expression
    argument-expression-list `,` assignment-expression    

constant-expression:
    conditional-expression

--------------------------------------------------------------------------------
    Declarations

// 6.7.10 Static assertions - excluded
declaration:
    declaration-specifiers {init-declarator-list} `;`

// 6.7.4 Function specifiers - excluded (inline, _Noreturn)
// 6.7.5 Alignment specifier - excluded (_Alignas)
declaration-specifiers:
    storage-class-specifier {declaration-specifiers}
    type-specifier {declaration-specifiers}
    `const` {declaration-specifiers}

init-declarator-list:
    init-declarator
    init-declarator-list `,` init-declarator

init-declarator:
    declarator
    declarator `=` initializer

// `extern` `static` `_Thread_local` `auto` `register` - excluded, see 6.7.1
storage-class-specifier:
    `typedef`

    Type specifiers

// `short` `long` `double` `signed` `unsigned` `_Bool` `_Complex` - excluded, see 6.7.2
// 6.7.2.4 Atomic type specifiers - excluded
// struct-or-union-specifier replaced with struct-specifier, unions excluded
// 
type-specifier:
    `void`
    `char`
    `int`
    `float`
    struct-specifier
    enum-specifier
    typedef-name

    Structure and union specifiers

// struct-or-union replaced with simply `struct` terminal
struct-specifier:
    `struct` {identifier} `{` struct-declaration-list `}`
    `struct` identifier

struct-declaration-list:
    struct-declaration
    struct-declaration-list struct-declaration

struct-declaration:
    specifier-qualifier-list {struct-declarator-list} `;`

specifier-qualifier-list:
    type-specifier {specifier-qualifier-list}
    `const` {specifier-qualifier-list}

// {declarator} `:` constant-expression (Bit fields) - excluded
// that way struct-declarator became simply declarator
struct-declarator-list:
    declarator
    struct-declarator-list `,` declarator

    Enumeration specifiers

enum-specifier:
    `enum` {identifier} `{` enumerator-list `}`
    `enum` {identifier} `{` enumerator-list `,` `}`
    `enum` identifier

enumerator-list:
    enumerator
    enumerator-list `,` enumerator

enumerator:
    enumeration-constant
    enumeration-constant `=` constant-expression

    Type qualifiers

// `restrict` `volatile` `_Atomic` - excluded
// and since type-qualifier can only be `const` it will be replaced with `const`
// in latter appearances
// and regarding that fact type-qualifier-list also becomes useless
// so `const` will be used instead
type-qualifier:
    `const`

    Declarators    

declarator:
    {pointer} direct-declarator

// `static` keyword appearance within `[` `]` excluded See 6.7.6.3 and
// http://hamberg.no/erlend/posts/2013-02-18-static-array-indices.html
// for details
// `const` keyword appearance within `[` `]` is also excluded as well as `*`
direct-declarator:
    identifier
    `(` declarator `)`
    direct-declarator `[` {assignment-expression} `]`
    direct-declarator `(` parameter-list `)`
    direct-declarator `(` {identifier-list} `)`

pointer:
    `*` {`const`}
    `*` {`const`} pointer

// all occurences of parameter-type-list are replaced with parameter-list
// due to exclusion of `...` punctuation
parameter-list:
    parameter-declaration
    parameter-list `,` parameter-declaration

parameter-declaration:
        declaration-specifiers declarator
        declaration-specifiers {abstract-declarator}

identifier-list:
    identifier
    identifier-list `,` identifier


    Type Names

type-name:
    specifier-qualifier-list {abstract-declarator}

abstract-declarator:
    pointer
    {pointer} direct-abstract-declarator

// Yet again, as in direct-declarator: all stuff within square brackets
// except {assignment-expression} is excluded
direct-abstract-declarator:
    `(` abstract-declarator `)`
    {direct-abstract-declarator} `[` {assignment-expression} `]`
    {direct-abstract-declarator} `(` {parameter-list} `)`

    Type definitions

typedef-name:
    identifier

    
    Initialization

initializer:
    assignment-expression
    `{` initializer-list `}`
    `{` initializer-list `,` `}`

initializer-list:
    {designation} initializer
    initializer-list `,` {designation} initializer

designation:
    designator-list `=`

designator-list:
    designator
    designator-list designator

designator:
    `[` constant-expression `]`
    `.` identifier

    Statements and Blocks

statement:
    compound-statement
    expression-statement
    selection-statement
    iteration-statement
    jump-statement

    Compound statement

compound-statement:
    `{` {block-item-list} `}`

block-item-list:
    block-item
    block-item-list block-item

block-item:
    declaration
    statement

    Expression and null statements

expression-statement:
    {expression} `;`

    Selection statements

selection-statement:
    `if` `(` expression `)` statement
    `if` `(` expression `)` statement `else` statement

iteration-statement:
    `while` `(` expression `)` statement
    `do` statement `while` `(` expression `)` `;`
    `for` `(` {expression} `;` {expression} `;` {expression} `)` statement
    `for` `(` declaration {expression} `;` {expression} `)` statement

jump-statement:
    `continue` `;`
    `break` `;`
    `return` {expression} `;`

    External definitions - excluded?

    Function definition

function-definition:
    declaration-specifiers declarator {declaration-list} compound-statement

declaration-list:
    declaration
    declaration-list declaration

