Grammar and implementation summary.

Universal character names in form of \u hex-quad and \U hex-quad hex-quad are
excluded.

pre-token:
    identifier
    pp-number
    character-literal
    string-literal
    punctuator
    each non white space character that cannot be one of the above

token:
    keyword
    identifier
    literal
    operator
    punctuator

// these keywords from c standard are excluded from study implementation:
//  restrict, _Alignas, _Alignof, _Atomic, _Bool, _Complex, _Generic, _Imaginary,
// _Noreturn, _Static_assert, _Thread_local,
// any other may be excluded later on
keyword:
    auto
    break
    case
    char
    const
    continue
    default
    do
    double
    else
    enum
    extern
    float
    for
    goto
    if
    inline
    int
    long
    register    
    return
    short
    signed
    sizeof
    static
    struct
    switch
    typedef
    union
    unsigned
    void
    volatile
    while

identifier:
    nondigit
    identifier nondigit
    identifier digit

nondigit: one of
    `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`
    `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`
    `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`
    `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z` `_`

digit: one of
    `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`

// note: differs from c standard where there is "p|P like e|E"
pp-number:
    digit
    `.` digit
    pp-number digit
    pp-number identifier-nondigit
    pp-number `e` sign
    pp-number `E` sign
    pp-number `.`

sign:
    `+`
    `-`

literal:
    integer-literal
    floating-literal
    character-literal

// note: our implementation excludes optional integer suffix
integer-literal:
    decimal-literal
    octal-literal
    hexadecimal-literal

decimal-literal:
    nonzero-digit
    decimal-literal digit

octal-literal:
    0
    octal-literal octal-digit

hexadecimal-literal:
    0x hexadecimal-digit
    0X hexadecimal-digit
    hexadecimal-literal hexadecimal-digit

nonzero-digit: one of
    1 2 3 4 5 6 7 8 9

octal-digit: one of
    0 1 2 3 4 5 6 7

hexadecimal-digit: one of
    0 1 2 3 4 5 6 7 8 9
    a b c d e f
    A B C D E F

// note: uses grammar from C++ n3485, with floating suffix excluded
floating-literal:
    fractional-constant {exponent-part}
    digit-sequence exponent-part

fractional-constant:
    {digit-sequence} . digit-sequence
    digit-sequence .

exponent-part:
    e {sign} digit-sequence
    E {sign} digit-sequence

digit-sequence:
    digit
    digit-sequence digit

// note: L, u, U prefixes excluded
character-literal:
    'c-char-sequence'

c-char-sequence:
    c-char
    c-char-sequence c-char

c-char:
    any member of the source character set except
        the single quote ', backslash \, or new-line character
    escape-sequence

escape-sequence:
    simple-escape-sequence
    octal-escape-sequence
    hexadecimal-escape-sequence

simple-escape-sequence: one of
    \' \" \? \\ \a \b \f \n \r \t \v

octal-escape-sequence:
    \ octal-digit
    \ octal-digit octal-digit
    \ octal-digit octal-digit octal-digit

hexadecimal-escape-sequence:
    \x hexadecimal-digit
    hexadecimal-escape-sequence hexadecimal-digit

// note: encoding prefixes u8, u, U, L are excluded
string-literal:
    "s-char-sequence"

s-char-sequence:
    s-char
    s-char-sequence s-char

s-char:
    any member of the source character set except
        the double-quote ", backslash \, or new-line character
    escape-sequence

punctuator: one of
    [ ] ( ) { } . ->
    ++ -- & * + - ~ !
    / % << >> < > <= >= == != ^ | && ||
    ? : ; ...
    = *= /= %= += -= <<= >>= &= ^= |=
    , # ##
    <: :> <% %> %: %:%:

Comments are treated as whitespace. The characters /* start a comment, which
terminates with the characters */. These comments do not nest. The characters //
start a comment, which terminates with the next new-line character.