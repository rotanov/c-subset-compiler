{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"exc",
				"exclusive-OR-expression"
			],
			[
				"unar",
				"unary-operator"
			],
			[
				"floa",
				"floating-literal"
			],
			[
				"for",
				"fori	for i,v in ipairs()"
			],
			[
				"Spr",
				"SpriteId"
			],
			[
				"s",
				"sym	Uint16"
			],
			[
				"min",
				"min"
			],
			[
				"b",
				"beginend	$1.begin(), $1.end()"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Кэширование\n\nКэш память бывает инклюзивная и эксклюзивная.\n\nwrite through режим чего-то там\nа иначе write back (delayed write)\n\nMTRR\n\ncache coherency\n\nMESI\n\nNUMA Non Unified Memory Architecture\n\nPrefetching\n\nMemory Barriers\nMemory Ordering Control\nWeak Memory Ordering\n\nSFence\nLFence\nMFence\n\nCISC\nRISC\nVLIW\nEPIC\n\n1. Fetching\n2. Decode -> micro ops\n    1. Length Determination\n    2. \n...\n\nExecution Units\nRetire Buffer\n\nBranch Prediction\n\nBPB - Branch Prediction Buffer\nBTB - Branch Target Buffer\n\n\n\n\n\n\n\n\n\n\n\n",
			"settings":
			{
				"buffer_size": 508,
				"line_ending": "Windows",
				"name": "Кэширование"
			}
		},
		{
			"contents": "Лекция. Курс компиляторов.\n\nРазбор объявлений и выражений.\nТаблица символов.\n\nclass SymTable\n{\n    Symbols\n}\n\n\nclass SymVariable : Symbol\n{\n    \n}\n\nclass SymType: Symbol\n{\n    \n}\n\nclass SymFunction: Symbol\n{\n    params\n    locals\n    body - Operator : Statement : Node (Assignment, Expression)\n}\n\nоператоры:\nwhile\n{\n    cond: Expression\n    body: Statement\n}\n\nRepeat -//-\n\nif : statement\n{\n    cond: Expression\n    body1: Statement\n    body2: Statement\n    (EmptyStatement)\n}\n\nfor : statement\n{\n    e[3] : Expression\n}\n\nbreak, continue, return\n\n!!!\nBlock : statement\n{\n    symtable\n    statements\n}\n\n\nParse возвращает указатель на таблицу символов, которая содержит глобальные\nпеременные.\n\nЗадача:  реализовать вот это.\n\nСтэк таблиц символов\n0. Окружение (char, int float, printf etc)\n1. Global Symbol Table\n2. ...\n\nОперации со стэком таблиц символов:\n1. искать символ (нельзя переопределеять то что на самом верхнем уровне)\n2. добавлять символ\n(категории таблиц символов: пространства имён структур и переменных не конфликтуют\nнапример)\n\nИмя структуры, тэг, тэгдеф???\nСразу объявление переменной.\n\nВозможнные трудности (си):\nРазбор типов данных.\nТрюки: (проблема в том что мы не можем легко конструировать тип по частям\nв языке си: int a[10] массив из десяти чисел,  int* a[10] - массив из 10 указателей\n, int (*a)[10] указатель на массив из 10 символов)\nПроблема в том, что мы как бы разобрали часть выражения:\n    int a[10][21]; массив из десяти элементов, каждый из которых является массивом из 20 элементов, каждый\n    из которых имеет тип int. Проблема в том, что объявление типа далеко от того\n    момента, когда мы пониманием, что мы находимся в объявлении массива массивов.\n\n1. Создавать типы заглушки. вместо типа, когда непонятно, какой тип. Потом подставляем\nкогда становится ясно что за тип.\n2. Можно сжирать квадратные скобки в цикле. Но надо будет нарушить концепцию рекурсивного спуска+\nДля функций, которые возвращают массив, указатель на массив или массив указателей на функции, которые возвращают массив. \n3. Можно пытаться применить трюк конструирования структуры данных на обратном ходе рекурсии.\nВсё равно понядобятся промежуточные типы или удаление чего-то там.\n\n\nСборка мусора:\n1. Аккуратный конструктор и деструктор (нетривиально, потому что может быть много ссылок на объект и \nбольше одного пути, который попадает в одну и ту же точку. Избежать double delete)\n2. РефКаунт \n\nSymType : SymArray { elementType может быть массивом }\n\nМы не будем реализовывать класс алгоритмов для выделения памяти.\nОбращаться к операционной системе для выделением памяти плохо.\n\n\nСледующий этап:\n    \n    В чём же состоят проверки? Во-первых мы проверяем для каждой операции совместимость\nтипов операндов. Тут у нас какие есть варианты? У нас есть совместимость типов для полиморфных операций.\nТ.е. бинарных операций. С учётом того, что у нас три типа - чар, инт и доубле, то все типы совместимы с\nсоответствующими преобразованиями. Для того чтобы осуществлять проверку типов нам необходимо\nсначала эти типы расчитать, т.е. нам необходимо какую-нибудь функцию типа GetType, которая будет\nвиртуальной в Expression и будет возвращать тип выражения. Для литералов всё просто,\nдля бинарных операций - комбинируем, всё. Для побитовых - ньюансы.\n\nС указателями ньюансы. void* совместим со всем.\n\nОбращения к записям. GetType - что-то типа единичного вызова GetType с самого верха, который\nПроходит всё рекурсивно и сохраняет типы походу, находя ошибки.\n\nДля вызовов функций надо проверить. 1. Количество аргументов совпадает, \nПо значению: 2. последовательное соответствие типов. Exactly. 3. Типы совпадают - всё хорошо. 4. Допустимо повышение скалярных типов. (по значению). Указатель на что угодно -> указатель на void*.\nДля массивов можно сделать exact match.\n\nДля присваиваний 1. совпадение по типу с повышением. 2. l-value (допустимо взятие адреса)\n\nВ случае неявных преобразований (целое + вещественно) то при генерации кода\nнам необходимо будет сгенерировать разный код для разных типов аргументов.\n1. Усложнить генератор кода и написать n вариантов для сложения\n2. На этапе определения типов модификацию дерева, которая вставит преобразование типов где нужно\n\nЭто на сл. занятие (через две недели)\nПар архитектуры в субботу не будет, потому что асм.\n\nПростая инициализация обязательна и делается как присваивание.\n\n    Q/A\n\nПоддержка const - Да, в смысле только в объявлениях\nПоддержка enum - выпилили\nСравнение типов объявленых typedef, считать равными!\nЗа сколько min проходов можно всё сделать 2\nСложные инициализацторы - опциональны!\n\n    Code generation\n\n",
			"settings":
			{
				"buffer_size": 4569,
				"line_ending": "Windows",
				"name": "Лекция. Курс компиляторов."
			}
		},
		{
			"contents": "\n\nif(\n    isdigit(c)\n        ||(\n            (\n                c == '.' \n                &&\n                (\n                    (\n                        IncPos(), isdigit(cget())\n                    )\n                ||(\n                    DecPos(), false\n                  )\n                ))\n            &&\n            (DecPos(), true)))\n    return ParseNumber()&&OldPos != Pos;",
			"settings":
			{
				"buffer_size": 385,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Grammar\n\n    Notation\n\n    In the syntax notation used in this clause, syntactic categories (nonterminals)\nare indicated by words, separated by `-` symbol, and literal words and character\nset members (terminals) by enclosing in grave accent (` рус. — гравис).\n    A colon (:) following a nonterminal introduces its definition. Alternative\ndefinitions are listed on separate lines, except when prefaced by\nthe words ‘‘one of’’. An optional symbol is indicated by enclosing in curly\nbraces ({}) so that {expression} indicates an optional expression non terminal.\n    // at the end of the line denotes beginning of a comment\n\n    Expressions\n\n// 6.5.1.1 Generic selection excluded\nprimary-expression:\n    identifier\n    literal\n    string-literal\n    `(` expression `)`\n\n// 6.5.2.5 Compound literals - excluded\npostfix-expression:\n    primary-expression\n    postfix-expression `[` expression `]`\n    postfix-expression `(` {argument-expression-list} `)`\n    postfix-expression `.` identifier\n    postfix-expression `->` identifier\n    postfix-expression `++`\n    postfix-expression `--`\n\nunary-expression:\n    postfix-expression\n    `++` unary-expression\n    `--` unary-expression\n    unary-operator cast-expression\n    `sizeof` unary-expression\n    `sizeof` `(` type-name `)`\n\nunary-operator: one of\n    `&` `*` `+` `-` `~` `!`\n\ncast-expression:\n    unary-expression\n    `(` type-name `)` cast-expression\n\nmultiplicative-expression:\n    cast-expression\n    multiplicative-expression `*` cast-expression\n    multiplicative-expression `/` cast-expression\n    multiplicative-expression `%` cast-expression\n\nadditive-expression:\n    multiplicative-expression\n    additive-expression `+` multiplicative-expression\n    additive-expression `-` multiplicative-expression\n\nshift-expression:\n    additive-expression\n    shift-expression `<<` additive-expression\n    shift-expression `>>` additive-expression\n\nrelational-expression:\n    shift-expression\n    relational-expression `<` shift-expression\n    relational-expression `>` shift-expression\n    relational-expression `<=` shift-expression\n    relational-expression `>=` shift-expression\n\nequality-expression:\n    relational-expression\n    equality-expression `==` relational-expression\n    equality-expression `!=` relational-expression\n\nAND-expression:\n    equality-expression\n    AND-expression `&` equality-expression\n\nexclusive-OR-expression:\n    AND-expression\n    exclusive-OR-expression `^` AND-expression\n\ninclusive-OR-expression:\n    exclusive-OR-expression\n    inclusive-OR-expression `|` exclusive-OR-expression\n\nlogical-AND-expression:\n    inclusive-OR-expression\n    logical-AND-expression `&&` inclusive-OR-expression\n\nlogical-OR-expression:\n    logical-AND-expression\n    logical-OR-expression `||` logical-AND-expression\n\n// right associative\n// PHP HAS LEFT ASSOCIATIVE CONDITIONAL OPERATOR (unable to hold it)\nconditional-expression:\n    logical-OR-expression\n    logical-OR-expression `?` expression `:` conditional-expression\n\nassignment-expression:\n    conditional-expression\n    unary-expression assignment-operator assignment-expression\n\nassignment-operator: one of\n    `=` `*=` `/=` `%=` `+=` `-=` `<<=` `>>=` `&=` `^=` `|=`\n\nexpression:\n    assignment-expression\n    expression `,` assignment-expression\n\nargument-expression-list:\n    assignment-expression\n    argument-expression-list `,` assignment-expression    \n\nconstant-expression:\n    conditional-expression\n\n--------------------------------------------------------------------------------\n    Declarations\n\n// 6.7.10 Static assertions - excluded\ndeclaration:\n    declaration-specifiers {init-declarator-list} `;`\n\n// 6.7.4 Function specifiers - excluded (inline, _Noreturn)\n// 6.7.5 Alignment specifier - excluded (_Alignas)\ndeclaration-specifiers:\n    storage-class-specifier {declaration-specifiers}\n    type-specifier {declaration-specifiers}\n    `const` {declaration-specifiers}\n\ninit-declarator-list:\n    init-declarator\n    init-declarator-list `,` init-declarator\n\ninit-declarator:\n    declarator\n    declarator `=` initializer\n\n// `extern` `static` `_Thread_local` `auto` `register` - excluded, see 6.7.1\nstorage-class-specifier:\n    `typedef`\n\n    Type specifiers\n\n// `short` `long` `double` `signed` `unsigned` `_Bool` `_Complex` - excluded, see 6.7.2\n// 6.7.2.4 Atomic type specifiers - excluded\n// struct-or-union-specifier replaced with struct-specifier, unions excluded\n// \ntype-specifier:\n    `void`\n    `char`\n    `int`\n    `float`\n    struct-specifier\n    typedef-name\n\n    Structure and union specifiers\n\n// struct-or-union replaced with simply `struct` terminal\nstruct-specifier:\n    `struct` {identifier} `{` struct-declaration-list `}`\n    `struct` identifier\n\nstruct-declaration-list:\n    struct-declaration\n    struct-declaration-list struct-declaration\n\nstruct-declaration:\n    specifier-qualifier-list {struct-declarator-list} `;`\n\nspecifier-qualifier-list:\n    type-specifier {specifier-qualifier-list}\n    `const` {specifier-qualifier-list}\n\n// {declarator} `:` constant-expression (Bit fields) - excluded\n// that way struct-declarator became simply declarator\nstruct-declarator-list:\n    declarator\n    struct-declarator-list `,` declarator\n\n    Type qualifiers\n\n// `restrict` `volatile` `_Atomic` - excluded\n// and since type-qualifier can only be `const` it will be replaced with `const`\n// in latter appearances\n// and regarding that fact type-qualifier-list also becomes useless\n// so `const` will be used instead\ntype-qualifier:\n    `const`\n\n    Declarators    \n\ndeclarator:\n    {pointer} direct-declarator\n\n// `static` keyword appearance within `[` `]` excluded See 6.7.6.3 and\n// http://hamberg.no/erlend/posts/2013-02-18-static-array-indices.html\n// for details\n// `const` keyword appearance within `[` `]` is also excluded as well as `*`\ndirect-declarator:\n    identifier\n    `(` declarator `)`\n    direct-declarator `[` {assignment-expression} `]`\n    direct-declarator `(` parameter-list `)`\n    direct-declarator `(` {identifier-list} `)`\n\npointer:\n    `*` {`const`}\n    `*` {`const`} pointer\n\n// all occurences of parameter-type-list are replaced with parameter-list\n// due to exclusion of `...` punctuation\nparameter-list:\n    parameter-declaration\n    parameter-list `,` parameter-declaration\n\nparameter-declaration:\n        declaration-specifiers declarator\n        declaration-specifiers {abstract-declarator}\n\nidentifier-list:\n    identifier\n    identifier-list `,` identifier\n\n\n    Type Names\n\ntype-name:\n    specifier-qualifier-list {abstract-declarator}\n\nabstract-declarator:\n    pointer\n    {pointer} direct-abstract-declarator\n\n// Yet again, as in direct-declarator: all stuff within square brackets\n// except {assignment-expression} is excluded\ndirect-abstract-declarator:\n    `(` abstract-declarator `)`\n    {direct-abstract-declarator} `[` {assignment-expression} `]`\n    {direct-abstract-declarator} `(` {parameter-list} `)`\n\n    Type definitions\n\ntypedef-name:\n    identifier\n\n    \n    Initialization\n\ninitializer:\n    assignment-expression\n    `{` initializer-list `}`\n    `{` initializer-list `,` `}`\n\ninitializer-list:\n    {designation} initializer\n    initializer-list `,` {designation} initializer\n\ndesignation:\n    designator-list `=`\n\ndesignator-list:\n    designator\n    designator-list designator\n\ndesignator:\n    `[` constant-expression `]`\n    `.` identifier\n\n    Statements and Blocks\n\nstatement:\n    compound-statement\n    expression-statement\n    selection-statement\n    iteration-statement\n    jump-statement\n\n    Compound statement\n\ncompound-statement:\n    `{` {block-item-list} `}`\n\nblock-item-list:\n    block-item\n    block-item-list block-item\n\nblock-item:\n    declaration\n    statement\n\n    Expression and null statements\n\nexpression-statement:\n    {expression} `;`\n\n    Selection statements\n\nselection-statement:\n    `if` `(` expression `)` statement\n    `if` `(` expression `)` statement `else` statement\n\niteration-statement:\n    `while` `(` expression `)` statement\n    `do` statement `while` `(` expression `)` `;`\n    `for` `(` {expression} `;` {expression} `;` {expression} `)` statement\n    `for` `(` declaration {expression} `;` {expression} `)` statement\n\njump-statement:\n    `continue` `;`\n    `break` `;`\n    `return` {expression} `;`\n\n    External definitions\n\ntranslation-unit:\n    external-declaration\n    translation-unit external-declaration\n\nexternal-declaration:\n    function-definition\n    declaration    \n\n    Function definition\n\nfunction-definition:\n    declaration-specifiers declarator {declaration-list} compound-statement\n\ndeclaration-list:\n    declaration\n    declaration-list declaration\n\n",
			"file": "/D/dev/compiler/doc/grammar",
			"file_size": 9399,
			"file_write_time": 130274017533360648,
			"settings":
			{
				"buffer_size": 8620,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 86.0,
		"selected_items":
		[
			[
				"C++",
				"Set Syntax: C++"
			],
			[
				"lua",
				"Set Syntax: Lua"
			],
			[
				"upgrapack",
				"Package Control: Upgrade Package"
			],
			[
				"upgapa",
				"Package Control: Upgrade Package"
			],
			[
				"uppack",
				"Package Control: Upgrade Package"
			],
			[
				"packli",
				"Package Control: List Packages"
			],
			[
				"lower",
				"Convert Case: Lower Case"
			],
			[
				"INSTPA",
				"Package Control: Install Package"
			],
			[
				"hex lit",
				"Hex Viewer: Toggle Endianness (Big|Little)"
			],
			[
				"inst pack",
				"Package Control: Install Package"
			],
			[
				"inst packa",
				"Package Control: Install Package"
			],
			[
				"diff",
				"FileDiffs: Menu"
			],
			[
				"instpa",
				"Package Control: Install Package"
			],
			[
				"hex",
				"Hex Viewer: Toggle Hex View"
			],
			[
				"set synt HT",
				"Set Syntax: HTML (Tcl)"
			],
			[
				"instpac",
				"Package Control: Install Package"
			],
			[
				"json",
				"Pretty JSON: Reformat (Pretty Print) JSON"
			],
			[
				"batch",
				"Set Syntax: Batch File"
			],
			[
				"lua dev",
				"Set Syntax: Lua Dev"
			],
			[
				"lua d",
				"Set Syntax: Lua Dev"
			],
			[
				"instpack",
				"Package Control: Install Package"
			],
			[
				"syn bat",
				"Set Syntax: Batch File"
			],
			[
				"synjson",
				"Set Syntax: JSON"
			],
			[
				"syn jso",
				"Set Syntax: JSON"
			],
			[
				"syn json",
				"Set Syntax: SJSON"
			],
			[
				"syn j",
				"Set Syntax: JSON"
			],
			[
				"Package Control: ",
				"Package Control: Upgrade Package"
			],
			[
				"inspack",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"tasks",
				"Tasks: Cancel"
			],
			[
				"Tasks",
				"Tasks: Archive"
			],
			[
				"c++",
				"Set Syntax: C++"
			],
			[
				"unf",
				"Code Folding: Unfold All"
			],
			[
				"ww",
				"Word Wrap: Toggle"
			],
			[
				"add fol",
				"Project: Add Folder"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"ipacka",
				"Package Control: Install Package"
			],
			[
				"pack insta",
				"Package Control: Install Package"
			],
			[
				"color",
				"Color picker"
			],
			[
				"install package",
				"Package Control: Install Package"
			],
			[
				"INSTAL",
				"Package Control: Install Package"
			],
			[
				"packin",
				"Package Control: Install Package"
			],
			[
				"css",
				"Set Syntax: CSS"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"sjson",
				"Set Syntax: SJSON"
			],
			[
				"installP",
				"Package Control: Install Package"
			],
			[
				"scala",
				"Set Syntax: Scala"
			],
			[
				"s bat",
				"Set Syntax: Batch File"
			],
			[
				"synta bat",
				"Set Syntax: Batch File"
			],
			[
				"plain",
				"Set Syntax: Plain Text"
			],
			[
				"toglmenu",
				"View: Toggle Menu"
			],
			[
				"to",
				"View: Toggle Menu"
			],
			[
				"togglemen",
				"View: Toggle Menu"
			],
			[
				"xml",
				"Set Syntax: XML"
			],
			[
				"upper",
				"Convert Case: Upper Case"
			],
			[
				"open",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"jso",
				"Set Syntax: JSON"
			],
			[
				"C+",
				"Set Syntax: C++"
			],
			[
				"markdown",
				"Markdown Preview: preview in Browser"
			],
			[
				"markdow",
				"Markdown Preview: preview in Sublime Text"
			],
			[
				"mark",
				"Markdown Preview: preview in Browser"
			],
			[
				"toggle",
				"View: Toggle Menu"
			],
			[
				"Preview in bro",
				"Markdown Preview: preview in Browser"
			],
			[
				"mark pre bro",
				"Markdown Preview: preview in Browser"
			],
			[
				"bro",
				"Markdown Preview: preview in Browser"
			],
			[
				"brower",
				"Markdown Preview: preview in Browser"
			],
			[
				"cheatsh",
				"Markdown Preview: open Markdown Cheat sheet"
			],
			[
				"mabr",
				"Markdown Preview: preview in Browser"
			],
			[
				"Markdow",
				"Markdown Preview: preview in Browser"
			],
			[
				"toggle men",
				"View: Toggle Menu"
			],
			[
				"package Con Dis",
				"Package Control: Disable Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"txt",
				"Set Syntax: Plain Text"
			],
			[
				"log",
				"Set Syntax: LaTeX Log"
			],
			[
				"pa",
				"Package Control: Remove Package"
			],
			[
				"makef",
				"Set Syntax: Makefile"
			],
			[
				"jq",
				"Set Syntax: jQuery (JavaScript)"
			],
			[
				"install package ",
				"Package Control: Install Package"
			],
			[
				"installPackage ",
				"Package Control: Install Package"
			],
			[
				"installpa",
				"Package Control: Install Package"
			],
			[
				"install pack",
				"Package Control: Install Package"
			],
			[
				"installPa",
				"Package Control: Install Package"
			],
			[
				"mako",
				"Set Syntax: HTML (Mako)"
			],
			[
				"brack",
				"Bracket Highlighter: Match Brackets"
			],
			[
				"html",
				"HTML: Encode Special Characters"
			],
			[
				"emmet",
				"Emmet: Expand Abbreviation"
			],
			[
				"Pack ins",
				"Package Control: Install Package"
			],
			[
				"user",
				"Preferences: Settings - User"
			],
			[
				"mak",
				"Markdown Preview: preview in Browser"
			],
			[
				"clang",
				"Preferences: SublimeClang Settings – Default"
			],
			[
				"sublim",
				"Preferences: SublimeClang Settings – User"
			],
			[
				"pack up",
				"Package Control: Upgrade Package"
			],
			[
				"mard",
				"Markdown Preview: preview in Browser"
			],
			[
				"asm",
				"Set Syntax: Assembly x86 Intel (FASM)"
			],
			[
				"package insta",
				"Package Control: Install Package"
			],
			[
				"markdo",
				"Markdown Preview: preview in Browser"
			],
			[
				"markd",
				"Markdown Preview: preview in Browser"
			],
			[
				"makio",
				"Markdown Preview: preview in Browser"
			],
			[
				"package ins",
				"Package Control: Install Package"
			],
			[
				"pack in",
				"Package Control: Install Package"
			],
			[
				"sy C++",
				"Set Syntax: C++"
			]
		],
		"width": 450.0
	},
	"console":
	{
		"height": 160.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/D/dev/compiler/src/Parser.hpp",
		"/D/dev/compiler/src/Parser.cpp",
		"/D/dev/compiler/src/utils.cpp",
		"/D/dev/compiler/src/constants.hpp",
		"/C/dev/boost_1_54_0/libs/context/src/asm/jump_i386_ms_pe_masm.asm",
		"/C/dev/boost_1_54_0/libs/context/src/asm/make_i386_ms_pe_masm.asm",
		"/D/dev/compiler/doc/grammar",
		"/D/dev/compiler/tests/expression-parser/046.t",
		"/D/dev/compiler/tests/expression-parser/000.t",
		"/D/dev/boost_1_54_0/boost/coroutine/v1/detail/coroutine_op.hpp",
		"/D/dev/compiler/test-driver/Makefile.Debug",
		"/D/dev/compiler/test-driver/Makefile",
		"/C/Users/mapho_000/Desktop/библграфпоиск.txt",
		"/C/portableApplications/miranda-ng-v0.93.5_x64/Profiles/Satana/Logs/Jabber.ru/zadrawch@conference.jabber.ru.log",
		"/H/dev/epicfail/src/to_draw_list.txt",
		"/D/dev/compiler/tests/expression-parser/001.t",
		"/D/dev/compiler/doc/simple-expression-grammar",
		"/D/dev/compiler/doc/lexical-grammar.txt",
		"/D/dev/compiler/doc/integral-types",
		"/D/dev/compiler/tests/simple-expression-parser/000.t",
		"/H/dev/epicfail/src/zadrawch@conference.jabber.ru-Log.txt",
		"/H/dev/epicfail/doc/todo.txt",
		"/C/portableApplications/miranda-ng-v0.93.5_x64/Profiles/Satana/Logs/Jabber.ru/shinkai_project@conference.jabber.ru.log",
		"/D/dev/compiler/tests/tokenizer/032.ref",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa2/tests/450-string-literal-concat.ref",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa2/tests/300-integer-limits.t",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa2/tests/300-hex-limits.t",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa2/tests/300-floating-suffix.t",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa2/tests/250-ud-strchar.t",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa2/tests/250-string-literal.t",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa2/tests/200-octal-limits.t",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa2/tests/200-character-literal.t",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa2/tests/200-basic-integer-suffix.t",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa2/tests/200-basic-floating.t",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa2/tests/100-simple.t",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa2/tests/100-integer-zero.t",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa2/tests/100-integer-zero.ref",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa2/tests/450-string-literal-concat.t",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa2/tests/500-plus-ud-suffix.t",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa2/tests/500-plus-ud-suffix.ref",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa2/tests/700-hard-string-concat.t",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa1/tests/200-charname-allowed.t",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa1/tests/200-charname-allowed.ref",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa1/tests/100-utf8.ref",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa1/tests/100-utf8.t",
		"/D/dev/cppgm/dev/cppgm-starter-kits/pa1/tests/100-raw-string-literal.t",
		"/D/dev/whiterra/repo/bin/res/json/resources.json",
		"/D/dev/compiler/doc/tasks.todo",
		"/D/dev/compiler/doc/tree-output-design.txt",
		"/D/dev/compiler/doc/test-driver.txt",
		"/D/dev/compiler/doc/se-important-cases.txt",
		"/D/dev/compiler/scripts/run_scanner_tests.bat",
		"/C/Users/mapho_000/Downloads/qq31-parenthesis/qq31-parenthesis/highlighter.cpp",
		"/C/Users/mapho_000/Downloads/qq31-parenthesis/qq31-parenthesis/textedit.cpp",
		"/C/Users/mapho_000/Downloads/qq31-parenthesis/qq31-parenthesis/textedit.h",
		"/C/portableApplications/miranda-ng-v0.93.5_x64/Profiles/Satana/Logs/Jabber.ru/redrawch@conference.jabber.ru.log",
		"/D/dev/whiterra/repo/rtr-ng.sublime-project",
		"/D/dev/whiterra/repo/rtr-ng.sublime-workspace",
		"/H/dev/#Finished/Calculator/src/MathParser.pas",
		"//Emily/dev/compiler/src/ITokenStream.hpp",
		"//Emily/dev/compiler/src/Constants.hpp",
		"//Emily/dev/compiler/src/pretokenizer.hpp",
		"//Emily/dev/compiler/doc/tasks.todo",
		"//Emily/dev/compiler/doc/lexical-grammar.txt",
		"/C/portableApplications/miranda-ng-v0.93.5_x64/Profiles/Satana/Logs/Freenode/#qt - FreeNode.log",
		"/C/Users/mapho_000/Desktop/し.txt",
		"/D/dev/whiterra/repo/bin/error.log",
		"/C/Users/mapho_000/Desktop/json/json/resources.json",
		"/D/dev/whiterra/repo/bin/res/json/_resources.json",
		"/D/dev/whiterra/repo/editor/deploy-step.bat",
		"/D/dev/whiterra/repo/game/deploy-step.bat",
		"/D/dev/whiterra/repo/deploy.bat",
		"/D/dev/whiterra/ROADS_of_ROME_NG/error.log",
		"/D/dev/compiler/bin/log.txt",
		"/D/cppgm/dev/cppgm-dev/common/Tokenizer.hpp",
		"/D/cppgm/dev/cppgm-dev/common/DebugPPTokenStream.hpp",
		"/D/dev/whiterra/repo/src/fx_cCaustic.cpp",
		"/D/dev/compiler/doc/grammar.txt",
		"/D/cppgm/dev/cppgm-dev/pptoken/pptoken.cpp",
		"/D/cppgm/dev/cppgm-dev/common/Constants.hpp",
		"/D/cppgm/dev/cppgm-dev/common/PostTokenStream.cpp",
		"/D/cppgm/dev/cppgm-dev/tests/900-real-world.t",
		"/D/dev/compiler/tests/100-a.t",
		"/D/dev/whiterra/repo/bin/res/json/Levels/test-case.json",
		"/D/dev/whiterra/repo/build/error.log",
		"/D/dev/whiterra/repo/bin/qlog.log",
		"/C/Users/Public/Desktop/desktop.ini",
		"/C/Users/mapho_000/Desktop/し.txt.hex",
		"/D/cppgm/dev/cppgm-dev/tests/500-isspace-code-point-wrong.t",
		"/D/cppgm/dev/cppgm-dev/tests/100-raw-string-literal.t",
		"/D/cppgm/dev/cppgm-dev/tests/100-partial-string-literal.t",
		"/D/cppgm/dev/cppgm-dev/tests/100-partial-comment.t",
		"/D/cppgm/dev/cppgm-dev/common/PostTokenStream.hpp",
		"/D/cppgm/dev/cppgm-dev/common/DebugPostTokenOutputStream.hpp",
		"/D/dev/compiler/debugtokenoutputstream.hpp",
		"/D/cppgm/dev/cppgm-dev/common/Utils.hpp",
		"/D/cppgm/dev/cppgm-dev/common/Utils.cpp",
		"/D/cppgm/dev/cppgm-dev/common/IPPTokenStream.hpp",
		"/D/dev/compiler/ipretokenstream.hpp",
		"/D/dev/compiler/tokenizer.cpp",
		"/D/dev/compiler/unicode.hpp",
		"/D/dev/compiler/unicode.cpp",
		"/D/dev/compiler/tests/100-empty.t",
		"/D/cppgm/dev/cppgm-dev/tests/100-character-literals.t",
		"/D/cppgm/dev/cppgm-dev/tests/100-a.ref",
		"/D/cppgm/dev/cppgm-dev/tests/100-a.t",
		"/D/cppgm/dev/cppgm-dev/tests/000-my-tests.t",
		"/D/dev/deku2d-engine/trunk/Engine/SharedSettings.pri",
		"/D/dev/whiterra/repo/game/game.pro",
		"/D/dev/deku2d-engine/trunk/Demos/Sandbox/Sandbox.pro",
		"/D/cppgm/dev/cppgm-dev/pptoken/pptoken.pro",
		"/D/dev/compiler/main.cpp",
		"/D/dev/build-compiler-gcc_4_8-Release/release/(成年コミック) [雑誌] COMIC アンスリウム (Anthurium) Vol.2 2013年06月号/test.cpp",
		"/D/dev/whiterra/rtr-res/xml/xml/resources.xml",
		"/C/Users/mapho_000/Downloads/ktt7.tar/ktt7/ktt7/Tokenizer.hpp",
		"/D/cppgm/dev/cppgm-dev/posttoken/posttoken.pro",
		"/C/Users/mapho_000/Downloads/ktt7.tar/ktt7/ktt7/PostTokenStream.cpp",
		"/D/cppgm/dev/cppgm-dev/pptoken/pptoken-ref",
		"/D/cppgm/dev/cppgm-dev/posttoken/posttoken",
		"/D/cppgm/dev/cppgm-dev/cppgm.pro",
		"/D/cppgm/dev/cppgm-starter-kits/pa1/tests/100-raw-string-literal.t",
		"/D/dev/whiterra/repo/bin/res/json/Levels/templates.json",
		"/C/Users/mapho_000/Desktop/json/json/Levels/templates.json",
		"/D/dev/whiterra/repo/bin/game.ini",
		"/C/Users/mapho_000/Desktop/RSEngine-7553457135d9bb3affb1e0d4e1a366ae91d311af",
		"/C/Users/mapho_000/Desktop/RSEngine-7553457135d9bb3affb1e0d4e1a366ae91d311af (1).tar/RSEngine-7553457135d9bb3affb1e0d4e1a366ae91d311af (1)/(1).tar/RSEngine-7553457135d9bb3affb1e0d4e1a366ae91d311af",
		"/C/portableApplications/miranda-ng-v0.93.5_x64/Profiles/Satana/Logs/Jabber.ru/s@anoos.pyos.net.log",
		"/C/Users/mapho_000/Desktop/ru.json"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"D:\\cppgm\\dev\\cppgm-dev\\common",
			"D:\\dev\\whiterra\\RSEngine-7553457135d9bb3affb1e0d4e1a366ae91d311af\\build-test\\RSEngine\\src",
			"D:\\dev\\hotlava\\HotSource_wx\\HotEngine\\Common",
			"D:\\dev\\whiterra\\repo\\bin\\res\\json\\Levels",
			"D:\\dev\\_work\\code\\HotCharts\\src",
			"D:\\dev\\hotlava\\HotSource_wx\\HotEngine\\Common",
			"C:\\Users\\mapho_000\\Downloads\\pa1-2\\work\\src",
			"D:\\dev\\whiterra\\repo\\bin\\res\\json",
			"D:\\dev\\hotlava\\HotSource_wx\\HotEngine\\Common",
			"D:\\dev\\hotlava\\HotSource_wx\\HotBox\\Common",
			"D:\\taken-from-work\\core\\ZombieBowling_iPad\\Main\\Src",
			"D:\\taken-from-work\\core\\ZombieBowling_iPad\\Main\\Src\\screens",
			"G:\\app\\Miranda_old\\Profiles\\Logs\\archived",
			"G:\\app\\Miranda\\Profiles\\Satana\\Logs",
			"D:\\dev\\whiterra\\repo",
			"D:\\dev\\whiterra\\rtr-res\\xml\\xml",
			"D:\\dev\\hotlava\\HotSource_wx\\HotStudio\\Common",
			"D:\\dev\\hotlava\\HotSource_wx\\HotEngine\\Common",
			"D:\\dev\\whiterra\\rtr-res\\xml\\xml",
			"D:\\dev\\qt5\\qttools\\src\\designer\\src",
			"D:\\dev\\qt5\\qttools\\src\\designer\\src\\components\\propertyeditor",
			"D:\\dev\\qt5\\qttools\\src\\designer",
			"D:\\dev\\qt5\\qttools\\src\\designer\\src\\lib\\sdk",
			"D:\\dev\\qt5\\qtbase\\include\\QtDesigner",
			"D:\\dev\\qt5\\qtbase\\include\\QtDesigner\\5.0.1\\QtDesigner\\private",
			"D:\\dev\\qt-creator\\src\\plugins\\designer",
			"D:\\dev\\hotlava\\HotSource_wx\\HotEngine\\Common",
			"D:\\dev\\whiterra\\NorthernTale2",
			"D:\\dev\\whiterra\\repo\\",
			"D:\\dev\\whiterra\\repo\\src",
			"D:\\dev\\whiterra\\NorthernTale2\\src\\editor\\MapEditor",
			"D:\\dev\\whiterra\\NorthernTale2\\src\\editor\\MapEditor\\MapEditorView",
			"D:\\dev\\whiterra\\NorthernTale2\\src\\editor\\MapEditor\\MapEditor",
			"D:\\dev\\hotlava\\HotSource_wx",
			"D:\\dev\\hotlava\\",
			"D:\\dev\\hotlava",
			"D:\\dev\\hotlava\\HotSource_wx\\HotEngine",
			"D:\\dev\\hotlava\\HotSource_wx",
			"D:\\dev\\whiterra\\NorthernTale2-mod\\src\\game",
			"D:\\dev\\whiterra\\NorthernTale2-mod\\proj",
			"D:\\dev\\hotlava\\mm4-main-ipad-free",
			"D:\\dev\\hotlava\\7-wonders-v",
			"D:\\dev\\hotlava\\7-wonders-iv",
			"D:\\dev\\hotlava\\7-wonders-iv\\Main_iPad",
			"D:\\dev\\HotSource_wx\\HotEngine",
			"D:\\dev\\_work\\code\\Pickers",
			"D:\\dev\\HotSource_wx\\HotEngine\\Common",
			"D:\\dev\\HotSource_wx\\HotSource",
			"D:\\dev\\HotSource_wx\\",
			"D:\\dev\\HotSource_wx\\HotEngine\\Common",
			"D:\\dev\\qt5"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"parameter-list",
			"enum",
			"`const`",
			"'const'",
			"const",
			"},",
			"OP",
			"O",
			"OP_STAR",
			"}",
			"},",
			"2",
			"{",
			"assert",
			"boost",
			"assoc",
			"multiplicative",
			"expression",
			"black",
			"'\\)",
			"э\\)",
			"\\)",
			")",
			"primary-expression",
			"exression",
			"argument-expression-list",
			"initializer-list",
			"primary-expression",
			"cast-expression",
			"constant-expression",
			"пидарасы",
			"character-literal",
			"floya.*http",
			"rgho",
			"ELSE",
			"IF",
			"FOR",
			"rem",
			"cd",
			"CD",
			"ECHO",
			"string-literal",
			"literal",
			"_wa",
			"boat",
			"Qt",
			"wacom ",
			"wacom cons",
			"wacom",
			"PushString",
			"FlushAdjacentStringLiterals",
			"(.*)",
			"\\{.*,(.*)\\},",
			"StringToTokenTypeMap",
			"key",
			"keyw",
			"IPP",
			"Match",
			"MatchPref",
			"source_",
			"SimpleEscapeSequence_Replacements",
			"Boat",
			"boat",
			"oct8cat.*joined",
			"oct8",
			"joined",
			"neko",
			"tako",
			"wacom",
			"consume",
			"flag",
			"boatstat",
			"8",
			"дофам",
			"Path",
			"127",
			"Debug\\|Win32",
			"\"Debug|Win32\"",
			"Debug|Win32",
			"instal",
			"conf",
			"1_01",
			"xsDstSign",
			"xTex",
			"grDraw",
			"COLOROP",
			"Material",
			"sVBO",
			"inlDrawSprite",
			"grDraw",
			"Dx",
			"grDraw",
			"inlineRender",
			"vbo",
			"inlDrawSprite",
			"CSprite",
			"lpSpr",
			"sCustomMaterial",
			"stage",
			"TEXTUREBLEND_MASK",
			"libc",
			"/NODEFAULTLIB",
			"MDd",
			".lib",
			"Water",
			"ktt7.*ktt4.*\\?",
			"\n",
			" ",
			"no-texture",
			",",
			"lousy.*седь",
			"воронеж",
			"OnHoverEn",
			"IDPREF",
			"plus",
			"twitch",
			"twitch.tv",
			"twitch.tv/",
			"Лагерь",
			"BUILD",
			"\"Effects\"",
			"Images",
			"Effec",
			"Image",
			"\"Images\"",
			"Imag",
			"(.*\"Name\": \")Images\"",
			"(.*\"Name\": \")Images\","
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"\\1,",
			"\\1",
			"\\1Visual\"",
			"\\1Visual\",",
			"\"\\1\": \"\\2\",",
			"\"\\u\\1\\2\":",
			",\\n\"\\1\": \"\\2\",",
			"},",
			"{ \"@type\": \"\\1\",",
			"FrameDelay",
			"FramesPerSequence",
			"\"\\u\\1\\2\":",
			",\\n\"\\1\": \"\\2\",",
			"},",
			"{ \"@type\": \"\\1\",",
			"\"\\u\\1\\2\":",
			",\\n\"\\1\": \"\\2\",",
			"},",
			"{ \"@type\": \"\\1\",",
			"FramesPerSequence",
			"",
			"FrameDelay",
			"\"\\u\\1\\2\":",
			",\\n\"\\1\": \"\\2\",",
			"},",
			"{ \"@type\": \"\\1\",",
			"\"\\u\\1\\2\":",
			",\\n\"\\1\": \"\\2\",",
			"},",
			"{ \"@type\": \"\\1\",",
			"FrameDelay",
			"FramesPerSequence",
			"},",
			"\"\\u\\1\\2\":",
			",\\n\"\\1\": \"\\2\",",
			"},",
			"{ \"@type\": \"\\1\",",
			"}",
			"\"\\u\\1\\2\":",
			",\\n\"\\1\": \"\\2\",",
			"},",
			"{ \"@type\": \"\\1\",",
			"",
			"\nindentation",
			"\\1\nindentation",
			"\nindentation",
			"// nice support of n-spaces  I'm going to stick with spaces for all\nindentation",
			"",
			"\"\\u\\1\\2\":",
			",\\n\"\\1\": \"\\2\",",
			"},",
			"{ \"@type\": \"\\1\",",
			"\"\\u\\1\\2\":",
			"},",
			",\\n\"\\1\": \"\\2\",",
			",\"\\1\": \"\\2\",",
			"\"\\1\": \"\\2\",",
			"},",
			"{ \"@type\": \"\\1\",",
			"\"\\1\": \"\\2\",\\n",
			"\"\\1\": \"\\2\",",
			"\\",
			"",
			"../src/",
			"",
			"../src/",
			"\\\\",
			"\\t\\t\\\\",
			"\\t\\\\"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"settings":
					{
						"buffer_size": 508,
						"regions":
						{
						},
						"selection":
						[
							[
								306,
								306
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "Кэширование",
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"encoding_helper_encoding_sublime": "UTF-8",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"settings":
					{
						"buffer_size": 4569,
						"regions":
						{
							"bookmarks":
							{
								"flags": 144,
								"icon": "bookmark",
								"regions":
								[
									[
										1339,
										1339
									]
								],
								"scope": "bookmarks"
							}
						},
						"selection":
						[
							[
								4569,
								4569
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "Лекция. Курс компиляторов.",
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"encoding_helper_encoding_sublime": "UTF-8",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2401.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"settings":
					{
						"buffer_size": 385,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								385
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"encoding_helper_encoding_sublime": "UTF-8",
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/D/dev/compiler/doc/grammar",
					"settings":
					{
						"buffer_size": 8620,
						"regions":
						{
						},
						"selection":
						[
							[
								8183,
								8183
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"encoding_helper_confidence": 0.99,
							"encoding_helper_encoding": "UTF-8",
							"encoding_helper_encoding_sublime": "UTF-8",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6001.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 38.0
	},
	"input":
	{
		"height": 45.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.clang":
	{
		"height": 130.0
	},
	"output.exec":
	{
		"height": 132.0
	},
	"output.hex_viewer_inspector":
	{
		"height": 184.0
	},
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"gramm",
				"doc/grammar"
			],
			[
				"reso.json",
				"bin/res/json/resources.json"
			],
			[
				"templates.json",
				"bin/res/json/Levels/templates.json"
			],
			[
				"res",
				"bin/res/json/resources.json"
			],
			[
				"caustcpp",
				"src/fx_cCaustic.cpp"
			],
			[
				"resour",
				"bin/res/json/resources.json"
			],
			[
				"causth",
				"src/fx_cCaustic.h"
			],
			[
				"mapcobh",
				"src/map_cObject.h"
			],
			[
				"mapcobj",
				"src/map_cObject.cpp"
			],
			[
				"caus",
				"src/fx_cCaustic.cpp"
			],
			[
				"cgamefac.h",
				"src/game_cgamefacade.h"
			],
			[
				"todo",
				"doc/tasks.todo"
			],
			[
				"reso",
				"bin/res/json/resources.json"
			],
			[
				"resources.json",
				"bin/res/json/resources.json"
			],
			[
				"resjson",
				"bin/res/json/resources.json"
			],
			[
				"thou",
				"doc/thoughts.txt"
			],
			[
				"qlog",
				"build/build/qlog.log"
			],
			[
				"fx_pyro",
				"src/fx_PyroEffects.cpp"
			],
			[
				"gtimer",
				"3rd/engine/inc/gtimer.h"
			],
			[
				"doc/th",
				"doc/thoughts.txt"
			],
			[
				"core_wndutils",
				"src/core_wndUtils.h"
			],
			[
				"cmenuf",
				"src/menu_cMenuFacade.h"
			],
			[
				"cmenuefaca",
				"src/menu_cMenuFacade.cpp"
			],
			[
				"gutil.h",
				"3rd/engine/inc/gutil.h"
			],
			[
				"kindlemainjava",
				"HotSource_wx/HotSource_android_mk/proj_mm4_kindle_free/src/com/mumbojumbo/hotbox/Main.java"
			],
			[
				"mmmain.java",
				"HotSource_wx/HotSource_android_mk/proj_mm2/src/com/mumbojumbo/hotbox/Main.java"
			],
			[
				"amazon",
				"HotSource_wx/HotEngine/Platforms/Android/AmazonStore.cpp"
			],
			[
				"androidmk.mk",
				"HotSource_wx/HotSource_android_mk/jni/Shared.mk"
			],
			[
				".cpp",
				"HotSource_wx/HotStudio/Common/Pch.cpp"
			],
			[
				"views",
				"hellboard/views.py"
			],
			[
				"views.py",
				"hellboard/views.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 180.0,
	"status_bar_visible": true
}
